{
  "name": "mongoose-deep-populate",
  "version": "1.1.0",
  "description": "Mongoose plugin to enable deep population of nested models",
  "keywords": [
    "mongo",
    "mongodb",
    "mongoose",
    "populate",
    "population",
    "deep populate",
    "deep population",
    "models",
    "nested models",
    "populate models",
    "model population",
    "documents",
    "nested documents",
    "populate documents",
    "documents population"
  ],
  "main": "index.js",
  "scripts": {
    "test": "gulp test --db mongodb://127.0.0.1/mongoose_deep_populate_test_db"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/buunguyen/mongoose-deep-populate"
  },
  "author": {
    "name": "Buu Nguyen",
    "email": "buunguyen@gmail.com",
    "url": "https://github.com/buunguyen"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/buunguyen/mongoose-deep-populate/issues"
  },
  "homepage": "https://github.com/buunguyen/mongoose-deep-populate",
  "peerDependencies": {
    "mongoose": ">=3.6.0"
  },
  "devDependencies": {
    "async": "^0.9.0",
    "chai": "^2.1.1",
    "gulp": "^3.8.11",
    "gulp-exit": "0.0.2",
    "gulp-jshint": "^1.9.2",
    "gulp-load-plugins": "^0.8.1",
    "gulp-mocha": "^2.0.0",
    "jshint-stylish": "^1.0.1",
    "lodash": "^3.4.0",
    "minimist": "^1.1.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/buunguyen/mongoose-deep-populate.svg?branch=master)](https://travis-ci.org/buunguyen/mongoose-deep-populate)\n\nBy default, Mongoose only supports populating nested models at one level of depth. This plugin makes it very simple to populate nested models at any level of depth.\n\n### Installation\n```\nnpm install mongoose-deep-populate\n```\n\n### Usage\n\nSample usages are based on the following schemas:\n\n```javascript\nvar UserSchema = new Schema({})\n\nvar CommentSchema = new Schema({\n  user  : {type: Number, ref: 'User'}\n})\n\nvar PostSchema = new Schema({\n  user    : {type: Number, ref: 'User'},\n  comments: [{type: Number, ref: 'Comment'}],\n  likes   : [{user: {type: Number, ref: 'User'}}],\n  approved: {status: Boolean, user: {type: Number, ref: 'User'}}\n})\n```\n\n#### Register plugin\n\n```javascript\nvar deepPopulate = require('mongoose-deep-populate');\nPostSchema.plugin(deepPopulate, options /* more on options below */);\n```\n\n#### Perform population\n\nOn `Post` model:\n\n```javascript\nPost.deepPopulate(posts, 'comments.user', function (err, _posts) {\n  // _posts is the same instance as posts and provided for convenience\n  posts.forEach(function (post) {\n    // post.comments and post.comments.user are fully populated\n  });\n});\n```\n\nOn an instance of `Post`:\n\n```javascript\npost.deepPopulate('comments.user', function (err, _post) {\n  // _post is the same instance as post and provided for convenience\n});\n```\n\nOn `Query`:\n\n```javascript\nPost.find().deepPopulate('comments.user').exec(function (err, posts) { ... });\nPost.findOne().deepPopulate('comments.user').exec(function (err, post) { ... });\nPost.findById(id).deepPopulate('comments.user').exec(function (err, post) { ... });\n```\n\n\n#### Populate multiple paths\n\nPass paths in a space- or comma-delimited string:\n\n```javascript\npost.deepPopulate('user comments.user likes.user approved.user', cb);\n```\nOr use an array of strings:\n\n```javascript\npost.deepPopulate(['comments.user', 'user', 'likes.user', 'approved.user'], cb);\n```\n\n#### Specify options\n\nSpecify `whitelist` option to ensure only certain paths can be populated. This is to prevent potential performance and security issues if you allow API clients to supply population paths.\n\n```javascript\nPostSchema.plugin(deepPopulate, {\n  whitelist: [\n    'user',\n    'comments.user'\n  ]\n});\n```\n\nUse the `populate` option to supply paths with corresponding [Mongoose populate options](http://mongoosejs.com/docs/api.html#model_Model.populate).\n\n```javascript\nPostSchema.plugin(deepPopulate, {\n  populate: {\n    'comments.user': {\n      select: 'name',\n      options: {\n        limit: 5\n      }\n    },\n    'approved.user': {\n      select: 'name'\n    }\n  }\n});\n```\n\nUse `rewrite` option to rewrite provided paths as well as paths in `whitelist` and `populate`. This is useful when you allow API clients to supply population paths (e.g. via query string) and want to make these paths more user-friendly. For example:\n\n```javascript\nPostSchema.plugin(deepPopulate, {\n  rewrite: {\n    author: 'user',\n    approver: 'approved.user'\n  }\n});\n\n// assume the query string is: ?populate=author,approver\npost.deepPopulate(req.query.populate, cb);  \n```\n\n##### Overriding options\n\nYou can override the above plugin options when invoking `deepPopulate`.\n\n```javascript\nPost.deepPopulate(posts, paths, {\n  whitelist: [],\n  populate: {},\n  rewrite: {}\n}, cb)\n\npost.deepPopulate(paths, {\n  whitelist: [],\n  populate: {},\n  rewrite: {}\n}, cb);\n\nPost.find({}).deepPopulate(paths, {\n  whitelist: [],\n  populate: {},\n  rewrite: {}\n}).exec(cb)\n```\n\n\n### Test\n\nThe test suite will **drop the database** each run, so only run it against a test database. To run tests, execute this command where `--db` is the connection string.\n\n```\ngulp test --db mongodb://127.0.0.1/mongoose_deep_populate_test_db\n```\n\n### Changelog\n\n#### v1.1.0\n\n* [Feature] Make mongoose a peer dependency to enforce supported versions\n\n#### v1.0.2\n\n* [Bug] Fix bug happening when Mongoose#populate does not infer the expected schema\n\n#### v1.0.1\n\n* [Bug] Apply `lean` to populated documents\n\n#### v1.0.0\n\n* [Feature] Apply `rewrites` to `whitelist` and `populate`\n\n#### v0.0.7\n\n* [Feature] Add `deepPopulate` to `Query`\n* [Feature] Support space delimiter in paths\n\n#### v0.0.6\n\n* [Feature] Support populate options\n* [Feature] Override options per call\n* [Bug] Handle null paths and callback\n\n#### v0.0.1\n\n* Initial release\n\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "mongoose-deep-populate@1.1.0",
  "_from": "mongoose-deep-populate@~1.1.0"
}
