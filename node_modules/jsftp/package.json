{
  "name": "jsftp",
  "id": "jsftp",
  "version": "1.5.2",
  "description": "A sane FTP client implementation for NodeJS",
  "keywords": [
    "ftp",
    "protocol",
    "files",
    "server",
    "client",
    "async"
  ],
  "author": {
    "name": "Sergi Mansilla",
    "email": "sergi.mansilla@gmail.com",
    "url": "http://sergimansilla.com"
  },
  "homepage": "https://github.com/sergi/jsftp",
  "repository": {
    "type": "git",
    "url": "https://github.com/sergi/jsftp.git"
  },
  "bugs": {
    "url": "https://github.com/sergi/jsftp/issues"
  },
  "dependencies": {
    "debug": "2.1.1",
    "event-stream": "3.1.7",
    "ftp-response-parser": "1.0.0",
    "once": "1.3.0",
    "parse-listing": "1.1.2",
    "unorm": "^1.3.3"
  },
  "devDependencies": {
    "mocha": "1.21.4",
    "istanbul": "0.3.2",
    "mocha-istanbul": "0.2.0",
    "sinon": "1.10.3",
    "ftp-test-server": "0.0.2",
    "rimraf": "2.2.8"
  },
  "main": "./jsftp.js",
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "mocha -R spec -t 5000",
    "clean": "rm -rf reports"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sergi/jsftp/blob/master/LICENSE"
    }
  ],
  "readme": "jsftp [![Build Status](https://secure.travis-ci.org/sergi/jsftp.png)](http://travis-ci.org/sergi/jsftp) <a href=\"http://flattr.com/thing/1452098/\" target=\"_blank\"><img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" /></a>\n=====\n\nA client FTP library for NodeJS that focuses on correctness, clarity\nand conciseness. It doesn't get in the way and plays nice with streaming APIs.\n\n[![NPM](https://nodei.co/npm/jsftp.png)](https://nodei.co/npm/jsftp/)\n\nStarting it up\n--------------\n\n```javascript\nvar JSFtp = require(\"jsftp\");\n\nvar Ftp = new JSFtp({\n  host: \"myserver.com\",\n  port: 3331, // defaults to 21\n  user: \"user\", // defaults to \"anonymous\"\n  pass: \"1234\" // defaults to \"@anonymous\"\n});\n```\n\njsftp gives you access to all the raw commands of the FTP protocol in form of\nmethods in the `Ftp` object. It also provides several convenience methods for\nactions that require complex chains of commands (e.g. uploading and retrieving\nfiles, passive operations), as shown below.\n\nWhen raw commands succeed they always pass the response of the server to the\ncallback, in the form of an object that contains two properties: `code`, which\nis the response code of the FTP operation, and `text`, which is the complete\ntext of the response.\n\nRaw (or native) commands are accessible in the form `Ftp.raw[\"command\"](params, callback)`\n\nThus, a command like `QUIT` will be called like this:\n\n```javascript\nFtp.raw.quit(function(err, data) {\n    if (err) return console.error(err);\n\n    console.log(\"Bye!\");\n});\n```\n\nand a command like `MKD` (make directory), which accepts parameters, looks like this:\n\n```javascript\nFtp.raw.mkd(\"/new_dir\", function(err, data) {\n    if (err) return console.error(err);\n\n    console.log(data.text); // Show the FTP response text to the user\n    console.log(data.code); // Show the FTP response code to the user\n});\n```\n\nAPI and examples\n----------------\n\n#### new Ftp(options)\n  - `options` is an object with the following properties:\n\n  ```javascript\n  {\n    host: 'localhost', // Host name for the current FTP server.\n    port: 3333, // Port number for the current FTP server (defaults to 21).\n    user: 'user', // Username\n    pass: 'pass', // Password\n  }\n  ```\n\nCreates a new Ftp instance.\n\n\n#### Ftp.host\n\nHost name for the current FTP server.\n\n#### Ftp.port\n\nPort number for the current FTP server (defaults to 21).\n\n#### Ftp.socket\n\nNodeJS socket for the current FTP server.\n\n#### Ftp.features\n\nArray of feature names for the current FTP server. It is\ngenerated when the user authenticates with the `auth` method.\n\n#### Ftp.system\n\nContains the system identification string for the remote FTP server.\n\n\n### Methods\n\n#### Ftp.raw.FTP_COMMAND([params], callback)\nAll the standard FTP commands are available under the `raw` namespace. These\ncommands might accept parameters or not, but they always accept a callback\nwith the signature `err, data`, in which `err` is the error response coming\nfrom the server (usually a 4xx or 5xx error code) and the data is an object\nthat contains two properties: `code` and `text`. `code` is an integer indicating\nthe response code of the response and `text` is the response string itself.\n\n#### Ftp.auth(username, password, callback)\nAuthenticates the user with the given username and password. If null or empty\nvalues are passed for those, `auth` will use anonymous credentials. `callback`\nwill be called with the response text in case of successful login or with an\nerror as a first parameter, in normal Node fashion.\n\n#### Ftp.ls(filePath, callback)\nLists information about files or directories and yields an array of file objects\nwith parsed file properties to the `callback`. You should use this function\ninstead of `stat` or `list` in case you need to do something with the individual\nfile properties.\n\n```javascript\nftp.ls(\".\", function(err, res) {\n  res.forEach(function(file) {\n    console.log(file.name);\n  });\n});\n```\n\n#### Ftp.list(filePath, callback)\nLists `filePath` contents using a passive connection. Calls callback with a\nstring containing the directory contents in long list format.\n\n```javascript\nftp.list(remoteCWD, function(err, res) {\n  console.log(res);\n  // Prints something like\n  // -rw-r--r--   1 sergi    staff           4 Jun 03 09:32 testfile1.txt\n  // -rw-r--r--   1 sergi    staff           4 Jun 03 09:31 testfile2.txt\n  // -rw-r--r--   1 sergi    staff           0 May 29 13:05 testfile3.txt\n  // ...\n});\n```\n\n#### Ftp.get(remotePath, callback)\nGives back a paused socket with the file contents ready to be streamed,\nor calls the callback with an error if not successful.\n\n```javascript\n  var str = \"\"; // Will store the contents of the file\n  ftp.get('remote/path/file.txt', function(err, socket) {\n    if (err) return;\n\n    socket.on(\"data\", function(d) { str += d.toString(); })\n    socket.on(\"close\", function(hadErr) {\n      if (hadErr)\n        console.error('There was an error retrieving the file.');\n    });\n    socket.resume();\n  });\n```\n\n#### Ftp.get(remotePath, localPath, callback)\nStores the remote file directly in the given local path.\n\n```javascript\n  ftp.get('remote/file.txt', 'local/file.txt', function(hadErr) {\n    if (hadErr)\n      console.error('There was an error retrieving the file.');\n    else\n      console.log('File copied successfully!');\n  });\n```\n\n#### Ftp.put(source, remotePath, callback)\nUploads a file to `filePath`. It accepts a string with the local path for the\nfile or a `Buffer` as a `source` parameter.\n\n```javascript\nftp.put(buffer, 'path/to/remote/file.txt', function(hadError) {\n  if (!hadError)\n    console.log(\"File transferred successfully!\");\n});\n```\n\n#### Ftp.rename(from, to, callback)\nRenames a file in the server. `from` and `to` are both filepaths.\n\n```javascript\nftp.rename(from, to, function(err, res) {\n  if (!err)\n    console.log(\"Renaming successful!\");\n});\n```\n\n#### Ftp.keepAlive([wait])\nRefreshes the interval thats keep the server connection active. `wait` is an optional time period (in milliseconds) to wait between intervals.\n\nYou can find more usage examples in the [unit tests](https://github.com/sergi/jsftp/blob/master/test/jsftp_test.js). This documentation\nwill grow as jsftp evolves.\n\n\nDebugging\n---------\n\nIn order to enable debug mode in a FTP connection, a `debugMode` parameter can\nbe used in the constructors's config object:\n\n```javascript\nvar Ftp = new JSFtp({\n  host: \"myserver.com\",\n  port: 3331,\n  user: \"user\",\n  pass: \"1234\",\n  debugMode: true\n});\n```\n\nIt can also be activated or deactivated by calling the `setDebugMode` method:\n\n```javascript\nFtp.setDebugMode(true); // Debug Mode on\nFtp.setDebugMode(false; // Debug mode off\n```\n\nIf the debug mode is on, the jsftp instance will emit `jsftp_debug` events with\ntwo parameters: the first is the type of the event and the second and object\nincluding data related to the event. There are 3 possible types of events:\n\n- `response` events: These are response from the FTP server to the user's FTP\n  commands\n\n- `user_command` events: These are commands that the user issues to the\n  FTP server.\n\n- `event:{event name}` events: These are other events mostly related to the server\n  connection, such as `timeout`, `connect` or `disconnect`. For example,\n  a timeout event will have the name `event:timeout`.\n\nIn order to react to print all debug events (for example), we would listen to the\ndebug messages like this:\n\n```javascript\nFtp.on('jsftp_debug', function(eventType, data) {\n  console.log('DEBUG: ', eventType);\n  console.log(JSON.stringify(data, null, 2));\n});\n```\n\nInstallation\n------------\n\n    npm install jsftp\n\nTest coverage\n-------------\n\nIn order to run coverage reports:\n\n    npm install --dev\n    make coverage\n\n    Current overall coverage rate:\n      lines......: 95.5% (278 of 291 lines)\n      functions..: 100% (69 of 69 functions)\n\n\nTests\n-----\n\nTo run tests:\n\n    npm install --dev\n    npm test\n\nLicense\n-------\n\nSee LICENSE.\n",
  "readmeFilename": "README.md",
  "_id": "jsftp@1.5.2",
  "_from": "jsftp@"
}
